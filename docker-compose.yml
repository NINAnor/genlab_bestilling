volumes:
  pgdata: {}
  statics: {}

x-django-env: &django-env
  DATABASE_URL: "postgis://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres?sslmode=disable"
  DJANGO_SETTINGS_MODULE: config.settings.production
  USE_DOCKER: "yes"
  OIDC_PROVIDER_ID: nina
  OIDC_CLIENT_ID: "${OIDC_CLIENT_ID}"
  OIDC_SECRET: "${OIDC_SECRET}"
  OIDC_PROVIDER_URL: "${OIDC_PROVIDER_URL}"
  OIDC_PROVIDER_NAME: NINA

x-django-prod-env: &django-prod-env
  <<: *django-env
  DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
  DJANGO_SERVER_EMAIL: ""
  DJANGO_ADMIN_URL: admin/
  DJANGO_SECURE_SSL_REDIRECT: False
  WEB_CONCURRENCY: 4
  DJANGO_ALLOWED_HOSTS: "localhost,django"

x-django-dev-env: &django-dev-env
  <<: *django-env
  DJANGO_SETTINGS_MODULE: config.settings.local
  IPYTHONDIR: "/app/.ipython"

x-django: &django
  build:
    target: django
  depends_on:
    - postgres
  environment:
    <<: *django-env

x-django-prod: &django-prod
  <<: *django
  depends_on:
    - postgres
  profiles:
    - prod
  command: gunicorn config.wsgi --bind 0.0.0.0:8000 --chdir=/app/src

x-django-dev: &django-dev
  <<: *django
  build:
    target: dev
  profiles:
    - dev
  environment:
    <<: *django-dev-env
  volumes:
    - ./src:/app/src
    - ./media:/app/media
    - /tmp/.X11-unix:/tmp/.X11-unix:ro
  command: ./src/manage.py runserver 0.0.0.0:8000
  #command: python -m pdb -c continue ./src/manage.py runserver 0.0.0.0:8000 --nothreading --noreload

services:
  django:
    <<: *django-prod
    environment:
      <<: *django-prod-env
      DJANGO_COLLECTSTATIC: 1
      DJANGO_MIGRATE: 1
      DJANGO_WAIT_FOR_DATABASE: 1
    volumes:
      - statics:/app/staticfiles
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=PathPrefix(`/`)"
      - "traefik.http.routers.django.entrypoints=web"
      - "traefik.http.routers.django.priority=1"
      - "traefik.http.services.django.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.upload-limit.buffering.maxRequestBodyBytes=8000000000"
      - "traefik.http.routers.django.middlewares=upload-limit"

  django-dev:
    <<: *django-dev
    tty: true
    stdin_open: true
    hostname: django
    environment:
      <<: *django-dev-env
      DJANGO_MIGRATE: 1
      DJANGO_WAIT_FOR_DATABASE: 1
      LIVE_SERVER_URL: http://django:8000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django-dev.rule=PathPrefix(`/`)"
      - "traefik.http.routers.django-dev.entrypoints=web"
      - "traefik.http.routers.django-dev.priority=1"
      - "traefik.http.services.django-dev.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.upload-limit-dev.buffering.maxRequestBodyBytes=8000000000"
      - "traefik.http.routers.django-dev.middlewares=upload-limit-dev"

  queue:
    <<: *django-prod
    environment:
      <<: *django-prod-env
      WAIT_FOR_HTTP: http://django:8000/ht/
    command: ./src/manage.py procrastinate worker

  queue-dev:
    <<: *django-dev
    environment:
      <<: *django-dev-env
      WAIT_FOR_HTTP: http://django:8000/ht/
    command: ./src/manage.py procrastinate worker

  tailwind:
    <<: *django-dev
    tty: true
    stdin_open: true
    command: ./src/manage.py tailwind start
    environment:
      <<: *django-dev-env
      DJANGO_TAILWIND: 1

  postgres:
    image: postgres:17
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 5432:5432

  traefik:
    image: traefik:v3.0
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    ports:
      - "8000:80"
      - "8080:8080"
    volumes:
      - ${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock:ro

  static:
    image: nginx:alpine
    profiles:
      - prod
    volumes:
      - ./static:/usr/share/nginx/html/static:ro
      - ./media:/usr/share/nginx/html/media:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.static.rule=PathPrefix(`/static/`) || PathPrefix(`/media/`)"
      - "traefik.http.routers.static.entrypoints=web"
      - "traefik.http.routers.static.priority=10"
      - "traefik.http.services.static.loadbalancer.server.port=80"
      - "traefik.http.routers.static.middlewares=static-stripprefix"

  frontend:
    profiles:
      - dev
    build:
      target: frontend
    command: npm run dev -- --host 0.0.0.0 --cors
    ports:
      - 5173:5173
    volumes:
      - ./src/frontend/src:/app/src
