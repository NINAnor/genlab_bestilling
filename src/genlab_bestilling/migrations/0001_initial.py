# Generated by Django 5.0.7 on 2024-07-24 14:16

import django.contrib.postgres.fields.ranges
import django.db.models.deletion
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("confirmed", "Confirmed"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                        ],
                        default="draft",
                    ),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="AnalysisType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Area",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("location_mandatory", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="EquipmentType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("unit", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="Genrequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("number", models.CharField(verbose_name="Genrequest number")),
                ("verified", models.BooleanField(default=False)),
                ("expected_total_samples", models.IntegerField(blank=True, null=True)),
                (
                    "analysis_timerange",
                    django.contrib.postgres.fields.ranges.DateRangeField(
                        blank=True, null=True
                    ),
                ),
                (
                    "analysis_types",
                    models.ManyToManyField(
                        blank=True, to="genlab_bestilling.analysistype"
                    ),
                ),
                (
                    "area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="genlab_bestilling.area",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="genrequests_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "members",
                    models.ManyToManyField(
                        blank=True,
                        related_name="genrequests_member",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="genrequests_owned",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="LocationType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name="Marker",
            fields=[
                ("name", models.CharField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="SampleType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="AnalysisOrder",
            fields=[
                (
                    "order_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="genlab_bestilling.order",
                    ),
                ),
                ("needs_guid", models.BooleanField(default=False)),
                ("isolate_samples", models.BooleanField()),
                ("return_samples", models.BooleanField()),
                (
                    "markers",
                    models.ManyToManyField(
                        blank=True, related_name="orders", to="genlab_bestilling.marker"
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("genlab_bestilling.order",),
        ),
        migrations.CreateModel(
            name="EquipmentOrder",
            fields=[
                (
                    "order_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="genlab_bestilling.order",
                    ),
                ),
                ("needs_guid", models.BooleanField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("genlab_bestilling.order",),
        ),
        migrations.AddField(
            model_name="order",
            name="genrequest",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="orders",
                to="genlab_bestilling.genrequest",
            ),
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=250)),
                ("river_id", models.CharField(blank=True, max_length=250, null=True)),
                ("station_id", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genlab_bestilling.locationtype",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="genrequest",
            name="samples_owner",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="genlab_bestilling.organization",
            ),
        ),
        migrations.AddField(
            model_name="order",
            name="sample_types",
            field=models.ManyToManyField(
                related_name="orders", to="genlab_bestilling.sampletype"
            ),
        ),
        migrations.AddField(
            model_name="genrequest",
            name="sample_types",
            field=models.ManyToManyField(blank=True, to="genlab_bestilling.sampletype"),
        ),
        migrations.CreateModel(
            name="Species",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genlab_bestilling.area",
                    ),
                ),
                (
                    "location_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genlab_bestilling.locationtype",
                    ),
                ),
                ("markers", models.ManyToManyField(to="genlab_bestilling.marker")),
            ],
        ),
        migrations.AddField(
            model_name="order",
            name="species",
            field=models.ManyToManyField(
                related_name="orders", to="genlab_bestilling.species"
            ),
        ),
        migrations.AddField(
            model_name="genrequest",
            name="species",
            field=models.ManyToManyField(
                blank=True, related_name="genrequests", to="genlab_bestilling.species"
            ),
        ),
        migrations.CreateModel(
            name="Sample",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("guid", models.CharField(blank=True, max_length=200, null=True)),
                ("name", models.CharField(blank=True, null=True)),
                ("date", models.DateField()),
                ("notes", models.TextField(blank=True, null=True)),
                ("pop_id", models.CharField(blank=True, max_length=150, null=True)),
                ("volume", models.FloatField(blank=True, null=True)),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="genlab_bestilling.location",
                    ),
                ),
                (
                    "markers",
                    models.ManyToManyField(blank=True, to="genlab_bestilling.marker"),
                ),
                (
                    "type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="genlab_bestilling.sampletype",
                    ),
                ),
                (
                    "species",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="genlab_bestilling.species",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="samples",
                        to="genlab_bestilling.analysisorder",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EquimentOrderQuantity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.DecimalField(decimal_places=4, max_digits=14)),
                (
                    "equipment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="orders",
                        to="genlab_bestilling.equipmenttype",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="equipments",
                        to="genlab_bestilling.equipmentorder",
                    ),
                ),
            ],
        ),
    ]
