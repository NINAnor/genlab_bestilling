# Generated by Django 5.1.3 on 2025-01-02 14:42

import django.contrib.postgres.fields.ranges
import django.db.models.deletion
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("genlab_bestilling", "0001_generate_genlabid"),
        ("nina", "0001_initial"),
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("confirmed", "Confirmed"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                        ],
                        default="draft",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_modified_at", models.DateTimeField(auto_now=True)),
                ("confirmed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="AnalysisType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Area",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("location_mandatory", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="EquipmentType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("unit", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="ExtractionPlate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_modified_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Genrequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "analysis_timerange",
                    django.contrib.postgres.fields.ranges.DateRangeField(
                        blank=True,
                        help_text="This helps the Lab estimating the workload, provide the timeframe for the analysis",
                        null=True,
                    ),
                ),
                (
                    "expected_total_samples",
                    models.IntegerField(
                        blank=True,
                        help_text="This helps the Lab estimating the workload, provide how many samples you're going to deliver",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_modified_at", models.DateTimeField(auto_now=True)),
                (
                    "analysis_types",
                    models.ManyToManyField(
                        blank=True, to="genlab_bestilling.analysistype"
                    ),
                ),
                (
                    "area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="genlab_bestilling.area",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="genrequests_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        help_text="Choose the UBW NINA Project for billing",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="nina.project",
                        verbose_name="UBW Project Name",
                    ),
                ),
            ],
            options={
                "verbose_name": "Genetic Request",
            },
        ),
        migrations.CreateModel(
            name="LocationType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="AnalysisOrder",
            fields=[
                (
                    "order_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="genlab_bestilling.order",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("genlab_bestilling.order",),
        ),
        migrations.CreateModel(
            name="ExtractionOrder",
            fields=[
                (
                    "order_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="genlab_bestilling.order",
                    ),
                ),
                (
                    "internal_status",
                    models.CharField(
                        choices=[
                            ("needs_check", "Needs check"),
                            ("checked", "Checked"),
                        ],
                        default="needs_check",
                    ),
                ),
                ("needs_guid", models.BooleanField(default=False)),
                ("return_samples", models.BooleanField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("genlab_bestilling.order",),
        ),
        migrations.AddField(
            model_name="order",
            name="genrequest",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="orders",
                to="genlab_bestilling.genrequest",
            ),
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=250)),
                ("river_id", models.CharField(blank=True, max_length=250, null=True)),
                ("code", models.CharField(blank=True, max_length=20, null=True)),
                ("fylke", models.CharField(blank=True, null=True)),
                (
                    "type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genlab_bestilling.locationtype",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Marker",
            fields=[
                ("name", models.CharField(primary_key=True, serialize=False)),
                (
                    "analysis_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="genlab_bestilling.analysistype",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="genrequest",
            name="samples_owner",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="genlab_bestilling.organization",
            ),
        ),
        migrations.CreateModel(
            name="Sample",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("guid", models.CharField(blank=True, max_length=200, null=True)),
                ("name", models.CharField(blank=True, null=True)),
                ("year", models.IntegerField()),
                ("notes", models.TextField(blank=True, null=True)),
                ("pop_id", models.CharField(blank=True, max_length=150, null=True)),
                ("volume", models.FloatField(blank=True, null=True)),
                ("genlab_id", models.CharField(blank=True, null=True)),
                (
                    "extractions",
                    models.ManyToManyField(
                        blank=True, to="genlab_bestilling.extractionplate"
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="genlab_bestilling.location",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="genlab_bestilling.sample",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Analysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_modified_at", models.DateTimeField(auto_now=True)),
                ("analysis_date", models.DateTimeField(blank=True, null=True)),
                ("result_file", models.FileField(blank=True, null=True, upload_to="")),
                ("extra", models.JSONField(blank=True, null=True)),
                (
                    "marker",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="genlab_bestilling.marker",
                    ),
                ),
                (
                    "samples",
                    models.ManyToManyField(blank=True, to="genlab_bestilling.sample"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SampleType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "areas",
                    models.ManyToManyField(blank=True, to="genlab_bestilling.area"),
                ),
            ],
        ),
        migrations.AddField(
            model_name="sample",
            name="type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="genlab_bestilling.sampletype",
            ),
        ),
        migrations.AddField(
            model_name="genrequest",
            name="sample_types",
            field=models.ManyToManyField(
                blank=True,
                help_text="samples you plan to deliver, you can choose more than one. ONLY sample types selected here will be available later",
                to="genlab_bestilling.sampletype",
            ),
        ),
        migrations.CreateModel(
            name="Species",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("code", models.CharField(blank=True, null=True)),
                (
                    "area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genlab_bestilling.area",
                    ),
                ),
                (
                    "location_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genlab_bestilling.locationtype",
                    ),
                ),
                ("markers", models.ManyToManyField(to="genlab_bestilling.marker")),
            ],
            options={
                "verbose_name_plural": "Species",
            },
        ),
        migrations.AddField(
            model_name="sample",
            name="species",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="genlab_bestilling.species",
            ),
        ),
        migrations.AddField(
            model_name="genrequest",
            name="species",
            field=models.ManyToManyField(
                blank=True, related_name="genrequests", to="genlab_bestilling.species"
            ),
        ),
        migrations.CreateModel(
            name="SampleMarkerAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "markers",
                    models.ManyToManyField(blank=True, to="genlab_bestilling.marker"),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genlab_bestilling.sample",
                    ),
                ),
                (
                    "analysis",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="genlab_bestilling.analysisorder",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="analysisorder",
            name="samples",
            field=models.ManyToManyField(
                blank=True,
                through="genlab_bestilling.SampleMarkerAnalysis",
                to="genlab_bestilling.sample",
            ),
        ),
        migrations.CreateModel(
            name="EquipmentOrder",
            fields=[
                (
                    "order_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="genlab_bestilling.order",
                    ),
                ),
                ("needs_guid", models.BooleanField()),
                (
                    "sample_types",
                    models.ManyToManyField(
                        blank=True, to="genlab_bestilling.sampletype"
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("genlab_bestilling.order",),
        ),
        migrations.CreateModel(
            name="EquimentOrderQuantity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quantity", models.DecimalField(decimal_places=4, max_digits=14)),
                (
                    "equipment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="orders",
                        to="genlab_bestilling.equipmenttype",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="equipments",
                        to="genlab_bestilling.equipmentorder",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="sample",
            name="extraction_order",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="samples",
                to="genlab_bestilling.extractionorder",
            ),
        ),
        migrations.AddField(
            model_name="extractionorder",
            name="sample_types",
            field=models.ManyToManyField(blank=True, to="genlab_bestilling.sampletype"),
        ),
        migrations.AddField(
            model_name="extractionorder",
            name="species",
            field=models.ManyToManyField(blank=True, to="genlab_bestilling.species"),
        ),
        migrations.CreateModel(
            name="ExtractPlatePosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("position", models.IntegerField()),
                ("extracted_at", models.DateTimeField(auto_now=True)),
                ("notes", models.CharField(blank=True, null=True)),
                (
                    "plate",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="sample_positions",
                        to="genlab_bestilling.extractionplate",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="plate_positions",
                        to="genlab_bestilling.sample",
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        fields=("plate", "position"), name="unique_positions_in_plate"
                    )
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="species",
            constraint=models.UniqueConstraint(
                fields=("code",), name="unique species code"
            ),
        ),
        migrations.AddConstraint(
            model_name="samplemarkeranalysis",
            constraint=models.UniqueConstraint(
                fields=("sample", "analysis"), name="unique_sample_per_analysis"
            ),
        ),
        migrations.AddConstraint(
            model_name="sample",
            constraint=models.UniqueConstraint(
                fields=("genlab_id",), name="unique_genlab_id"
            ),
        ),
    ]
