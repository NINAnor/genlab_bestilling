# Generated by Django 5.2.3 on 2025-08-14 08:31

import django.db.models.deletion
import django_lifecycle.mixins
import sequencefield.constraints
import sequencefield.fields
import shared.mixins
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("genlab_bestilling", "0043_remove_extractplateposition_plate_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Plate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_modified_at", models.DateTimeField(auto_now=True)),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AnalysisPlate",
            fields=[
                (
                    "plate_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="genlab_bestilling.plate",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, help_text="Human readable label", null=True
                    ),
                ),
                ("analysis_date", models.DateTimeField(blank=True, null=True)),
                (
                    "result_file",
                    models.FileField(
                        blank=True, null=True, upload_to="analysis/results/"
                    ),
                ),
                ("extra", models.JSONField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("genlab_bestilling.plate",),
        ),
        migrations.CreateModel(
            name="ExtractionPlate",
            fields=[
                (
                    "plate_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="genlab_bestilling.plate",
                    ),
                ),
                ("qiagen_id", sequencefield.fields.IntegerSequenceField()),
                ("freezer_id", models.CharField(blank=True, null=True)),
                ("shelf_id", models.CharField(blank=True, null=True)),
            ],
            options={
                "constraints": [
                    sequencefield.constraints.IntSequenceConstraint(
                        drop=True,
                        fields=("qiagen_id",),
                        maxvalue=2147483647,
                        name="genlab_bestilling_extractionplate_qiagen",
                        sequence="qiagen",
                        start=1,
                    )
                ],
            },
            bases=("genlab_bestilling.plate",),
        ),
        migrations.CreateModel(
            name="PlatePosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("position", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("notes", models.CharField(blank=True, null=True)),
                ("is_reserved", models.BooleanField(default=False)),
                (
                    "is_full",
                    models.GeneratedField(
                        db_persist=True,
                        expression=models.Case(
                            models.When(
                                condition=models.Q(
                                    ("sample_raw__isnull", False),
                                    ("sample_marker__isnull", False),
                                    ("is_reserved", True),
                                    _connector="OR",
                                ),
                                then=models.Value(True),
                            ),
                            default=models.Value(False),
                        ),
                        output_field=models.BooleanField(),
                    ),
                ),
                (
                    "plate",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="positions",
                        to="genlab_bestilling.plate",
                    ),
                ),
                (
                    "sample_marker",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="positions",
                        to="genlab_bestilling.samplemarkeranalysis",
                    ),
                ),
                (
                    "sample_raw",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="position",
                        to="genlab_bestilling.sample",
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        fields=("plate", "position"), name="unique_positions_in_plate"
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            ("sample_raw__isnull", False),
                            ("sample_marker__isnull", False),
                            ("is_reserved", True),
                            _connector="XOR",
                        ),
                        name="position_contain_marker_xor_raw_xor_reserved",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(("position__gte", 0), ("position__lte", 95)),
                        name="position_in_plate_value_range",
                    ),
                ],
            },
            bases=(shared.mixins.AdminUrlsMixin, models.Model),
        ),
    ]
