# Generated by Django 5.2.3 on 2025-08-13 11:30

import django.db.models.deletion
import django_lifecycle.mixins
import sequencefield.constraints
import sequencefield.fields
import shared.mixins
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("genlab_bestilling", "0043_analysisplate_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Plate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_modified_at", models.DateTimeField(auto_now=True)),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=(
                shared.mixins.AdminUrlsMixin,
                django_lifecycle.mixins.LifecycleModelMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="PlatePosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("position", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("notes", models.CharField(blank=True, null=True)),
            ],
            bases=(shared.mixins.AdminUrlsMixin, models.Model),
        ),
        migrations.DeleteModel(
            name="AnalysisPlate",
        ),
        migrations.RemoveField(
            model_name="sample",
            name="extractions",
        ),
        migrations.RemoveField(
            model_name="extractplateposition",
            name="plate",
        ),
        migrations.RemoveField(
            model_name="extractplateposition",
            name="sample",
        ),
        migrations.RemoveField(
            model_name="analysisresult",
            name="samples",
        ),
        migrations.AlterField(
            model_name="analysisresult",
            name="result_file",
            field=models.FileField(
                blank=True, null=True, upload_to="analysis_orders/results/"
            ),
        ),
        migrations.CreateModel(
            name="QiagenPlate",
            fields=[
                (
                    "plate_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="genlab_bestilling.plate",
                    ),
                ),
                ("quiagen_id", sequencefield.fields.IntegerSequenceField()),
                ("freezer_id", models.CharField(blank=True, null=True)),
                ("shelf_id", models.CharField(blank=True, null=True)),
            ],
            bases=("genlab_bestilling.plate",),
        ),
        migrations.AddField(
            model_name="analysisresult",
            name="plate",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="genlab_bestilling.plate",
            ),
        ),
        migrations.AddConstraint(
            model_name="analysisresult",
            constraint=models.UniqueConstraint(
                fields=("plate", "order", "marker"),
                name="unique_analysis_plate_order_marker",
            ),
        ),
        migrations.AddField(
            model_name="plateposition",
            name="plate",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="sample_positions",
                to="genlab_bestilling.plate",
            ),
        ),
        migrations.AddField(
            model_name="plateposition",
            name="sample",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="plate_positions",
                to="genlab_bestilling.sample",
            ),
        ),
        migrations.AddField(
            model_name="samplemarkeranalysis",
            name="plate_positions",
            field=models.ManyToManyField(
                blank=True, to="genlab_bestilling.plateposition"
            ),
        ),
        migrations.DeleteModel(
            name="ExtractionPlate",
        ),
        migrations.DeleteModel(
            name="ExtractPlatePosition",
        ),
        migrations.AddConstraint(
            model_name="qiagenplate",
            constraint=sequencefield.constraints.IntSequenceConstraint(
                drop=True,
                fields=("quiagen_id",),
                maxvalue=2147483647,
                name="genlab_bestilling_qiagenplate_qiagen",
                sequence="qiagen",
                start=1,
            ),
        ),
        migrations.AddConstraint(
            model_name="plateposition",
            constraint=models.UniqueConstraint(
                fields=("plate", "position"), name="unique_positions_in_plate"
            ),
        ),
        migrations.AddConstraint(
            model_name="plateposition",
            constraint=models.CheckConstraint(
                condition=models.Q(("position__gte", 0), ("position__lte", 95)),
                name="position_in_plate_value_range",
            ),
        ),
    ]
